#!groovy

pipeline {
	agent { node ("precise") }
	triggers {pollSCM('* * * * *')}
	options {
		buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
		timestamps()
	}

	stages {
		stage("Create docker image") {
			steps {
				withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
                                sh  ("""
                                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : *Branch*: ${env.GIT_BRANCH} *`Пошла жара!`*'
                                """)
                                }
				echo "=====================Building====================="
				sh "docker build -t avalancheforecast/main:pipe_test1 ."
			}
		}
		stage("Login Dockerhub") {
			steps {
				withCredentials([string(credentialsId: 'avalancheforecast', variable: 'LOGIN'), string(credentialsId: 'avalanche_password', variable: 'PASS')]) {
				echo "=====================Authentification====================="
					sh "docker login -u ${LOGIN} -p ${PASS}"
				}
			}
		}
		stage("Push image to Dockerhub") {
			steps {
				echo "=====================Pushing====================="
				sh "docker push avalancheforecast/main:pipe_test1"
			}
		}
		stage("Remove image locally") {
			steps {
				echo "=====================Removing====================="
				sh "docker rmi avalancheforecast/main:pipe_test1"
			}
		}
	}
	  post {
          success { 
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : `Собрался и уже в хранилище)`'
          """)
          }
          }
          aborted {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : `Отменен`'
          """)
          }
          }
          failure {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC  *Branch*: ${env.GIT_BRANCH} *Build* : `Неудача :( Увы, что-то пошло не так`'
          """)
          }
          }
        }
}
